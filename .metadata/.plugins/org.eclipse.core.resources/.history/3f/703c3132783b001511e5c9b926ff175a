package task7;

import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.StringTokenizer;

public class RMQ {
	public static PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));

	static class MyScanner {
	      BufferedReader br;
	      StringTokenizer st;
	 
	      public MyScanner() {
	         br = new BufferedReader(new InputStreamReader(System.in));
	      }
	 
	      public String next() {
	          while (st == null || !st.hasMoreElements()) {
	              try {
	                  st = new StringTokenizer(br.readLine());
	              } catch (IOException e) {
	                  e.printStackTrace();
	              }
	          }
	          return st.nextToken();
	      }
	 
	      public int nextInt() {
	          return Integer.parseInt(next());
	      }
	 
	      public long nextLong() {
	          return Long.parseLong(next());
	      }
	 
	      public double nextDouble() {
	          return Double.parseDouble(next());
	      }
	 
	      public String nextLine(){
	          String str = "";
		  try {
		     str = br.readLine();
		  } catch (IOException e) {
		     e.printStackTrace();
		  }
		  return str;
	      }
	}
	static int[] biTree;
	
	public static void insert(int index, int element) {
		int parent = index / 2;
		while (parent > 0) {
			biTree[parent] += element;
			parent /= 2;
		}
		
		biTree[index] = element;
	}
	
	public static void set(int index, int value) {
		int current = biTree[index];
		biTree[index] = value;
		int parent = index / 2;
		
		while (parent > 0) {
			biTree[parent] += current - value;
		}
	}
	
	public static int getMin(int start, int end) {
		return end;
		
	}
	
	public static void main(String[] args) {
		MyScanner sc = new MyScanner();
		
		int size = sc.nextInt();
		int queries = sc.nextInt();
		biTree = new int[2 * size];
		
		for (int i = 0; i < size; i++) {
			int index = size + i;
			insert(index, sc.nextInt());
		}
		
		for (int i = 0; i < biTree.length; i++) {
			out.printf("%d ", biTree[i]);
		}
		
		for (int i = 0; i < queries; i++) {
			String[] command = sc.nextLine().split("\\s+");
			
			if (command[0].equals("set")) {
				int index = Integer.parseInt(command[1]);
				int value = Integer.parseInt(command[2]);
				set(index, value);
			} else {
				int start = Integer.parseInt(command[1]);
				int end = Integer.parseInt(command[2]);
				
				out.println(getMin(start, end));
			}
		}
		
		out.flush();
		out.close();
	}

}
